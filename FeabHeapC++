#include <iostream>
#include <cmath>
#include <vector>
#include <limits>
#include <unordered_map>

class Node {
public:
    int key;    // Distance or priority value
    int value;  // Represents a location or identifier
    int degree;
    Node* parent;
    Node* child;
    Node* left;
    Node* right;
    bool mark;

    Node(int key, int value) : key(key), value(value), degree(0), parent(nullptr),
                               child(nullptr), mark(false) {
        left = right = this;
    }
};

class FibHeap {
private:
    Node* minNode;
    int totalNodes;

    void link(Node* y, Node* x);
    void consolidate();
    void cut(Node* x, Node* y);
    void cascadingCut(Node* y);

public:
    FibHeap() : minNode(nullptr), totalNodes(0) {}

    Node* insert(int key, int value);
    Node* extractMin();
    void decreaseKey(Node* x, int newKey);
    bool isEmpty() const { return minNode == nullptr; }
};

void FibHeap::link(Node* y, Node* x) {
    // Remove y from root list
    y->left->right = y->right;
    y->right->left = y->left;

    // Make y a child of x
    y->parent = x;
    y->mark = false;

    if (x->child == nullptr) {
        x->child = y;
        y->left = y->right = y;
    } else {
        y->left = x->child;
        y->right = x->child->right;
        x->child->right->left = y;
        x->child->right = y;
    }

    x->degree += 1;
}

void FibHeap::consolidate() {
    int maxDegree = static_cast<int>(std::log2(totalNodes)) + 1;
    std::vector<Node*> degreeTable(maxDegree, nullptr);

    // Create a list of root nodes
    std::vector<Node*> rootNodes;
    Node* x = minNode;
    if (x != nullptr) {
        do {
            rootNodes.push_back(x);
            x = x->right;
        } while (x != minNode);
    }

    // Consolidate nodes of the same degree
    for (Node* w : rootNodes) {
        x = w;
        int d = x->degree;

        while (degreeTable[d] != nullptr) {
            Node* y = degreeTable[d];
            if (x->key > y->key)
                std::swap(x, y);
            link(y, x);
            degreeTable[d] = nullptr;
            d += 1;
        }
        degreeTable[d] = x;
    }

    // Reconstruct the root list
    minNode = nullptr;
    for (Node* y : degreeTable) {
        if (y != nullptr) {
            if (minNode == nullptr || y->key < minNode->key)
                minNode = y;
        }
    }
}

Node* FibHeap::insert(int key, int value) {
    Node* newNode = new Node(key, value);

    if (minNode == nullptr) {
        minNode = newNode;
    } else {
        // Add new node to root list
        newNode->left = minNode;
        newNode->right = minNode->right;
        minNode->right->left = newNode;
        minNode->right = newNode;
        if (newNode->key < minNode->key)
            minNode = newNode;
    }

    totalNodes += 1;
    return newNode;
}

Node* FibHeap::extractMin() {
    Node* z = minNode;
    if (z != nullptr) {
        // Move all children of z to the root list
        if (z->child != nullptr) {
            Node* child = z->child;
            do {
                Node* next = child->right;

                // Add child to root list
                child->left->right = child->right;
                child->right->left = child->left;

                child->left = minNode;
                child->right = minNode->right;
                minNode->right->left = child;
                minNode->right = child;
                
                child->parent = nullptr;
                child = next;
            } while (child != z->child);
        }

        // Remove z from the root list
        z->left->right = z->right;
        z->right->left = z->left;

        if (z == z->right) {
            minNode = nullptr;
        } else {
            minNode = z->right;
            consolidate();
        }

        totalNodes -= 1;
    }
    return z;
}

void FibHeap::decreaseKey(Node* x, int newKey) {
    if (newKey > x->key) {
        std::cerr << "New key is greater than current key." << std::endl;
        return;
    }

    x->key = newKey;
    Node* y = x->parent;

    if (y != nullptr && x->key < y->key) {
        cut(x, y);
        cascadingCut(y);
    }

    if (x->key < minNode->key) {
        minNode = x;
    }
}

void FibHeap::cut(Node* x, Node* y) {
    // Remove x from child list of y
    if (y->child == x) {
        if (x->right == x)
            y->child = nullptr;
        else
            y->child = x->right;
    }
    x->left->right = x->right;
    x->right->left = x->left;

    // Add x to root list
    x->left = minNode;
    x->right = minNode->right;
    minNode->right->left = x;
    minNode->right = x;
    x->parent = nullptr;
    x->mark = false;

    y->degree -= 1;
}

void FibHeap::cascadingCut(Node* y) {
    Node* z = y->parent;
    if (z != nullptr) {
        if (!y->mark) {
            y->mark = true;
        } else {
            cut(y, z);
            cascadingCut(z);
        }
    }
}

// Example usage
int main() {
    FibHeap fibHeap;

    Node* n1 = fibHeap.insert(10, 1);
    Node* n2 = fibHeap.insert(5, 2);
    Node* n3 = fibHeap.insert(20, 3);

    std::cout << "Minimum node key before extraction: " << fibHeap.extractMin()->key << std::endl;

    fibHeap.decreaseKey(n3, 2);
    std::cout << "Minimum node key after decreasing key of n3: " << fibHeap.extractMin()->key << std::endl;

    return 0;
}
